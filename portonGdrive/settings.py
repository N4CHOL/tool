"""
Django settings for portonGdrive project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import json
from dotenv import load_dotenv
from datetime import timedelta
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = BASE_DIR / 'media'  # MEDIA_ROOT is a Path object
MEDIA_URL = '/media/'
# Path to your Google service account JSON file
GOOGLE_API_CREDENTIALS = BASE_DIR / 'porton-445021-f6da6be85d4d.json'

# Load credentials from the JSON file
with open(GOOGLE_API_CREDENTIALS) as f:
    credentials = json.load(f)

# Extract the SECRET_KEY from the JSON file or set a default
SECRET_KEY = credentials.get('secret_key', 'django-insecure-default-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = credentials.get('debug', True)

ALLOWED_HOSTS = []


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'files',
    'users',
    'login',
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'your-secret-key',  # Replace with your secret key
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

ROOT_URLCONF = 'portonGdrive.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portonGdrive.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# CORS settings (for testing)
CORS_ALLOW_ALL_ORIGINS = True  # Allow specific origins only
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000',  # React or frontend development URL
#     'http://127.0.0.1:3000',  # Alternative local URL
#     'https://your-production-url.com',  # Add your production URL
# ]
# CORS_ALLOW_METHODS = [
#     'GET',
#     'POST',
#     'PUT',
#     'PATCH',
#     'DELETE',
#     'OPTIONS',
# ]
# CORS_ALLOW_HEADERS = [
#     'content-type',
#     'authorization',
#     'x-csrftoken',
#     'accept',
#     'origin',
#     'user-agent',
# ]
# CORS_EXPOSE_HEADERS = ['Content-Disposition']
# CORS_ALLOW_CREDENTIALS = True

# Google Application Credentials
GOOGLE_APPLICATION_CREDENTIALS = str(GOOGLE_API_CREDENTIALS)
# Print the credentials path (for verification/debugging)
print(f"Google Application Credentials Path: {GOOGLE_APPLICATION_CREDENTIALS}")

VITE_OCR_APP_PREDICTION_KEY = '3b8ec60a12734631a45964b47103f16b'

load_dotenv()  # This loads the variables from .env into the environment
HANDWRITTEN_FOLDER_ID = os.getenv('HANDWRITTEN_FOLDER_ID')
NON_HANDWRITTEN_FOLDER_ID = os.getenv('NON_HANDWRITTEN_FOLDER_ID')
NEW_FILES_FOLDER_ID = os.getenv('NEW_FILES_FOLDER_ID')

